import { Markup } from "telegraf";
import { BotContext } from "../types.js";
import db from "../models/index.js";
import { CURRENCIES } from "../constants/currencies.js";
import { ProfileButtons, SettingsButtons } from "../buttons.js";
import exchangeRateService from "../services/exchangeRateService.js";

export const handleProfile = async (ctx: BotContext) => {
  const telegramId = ctx.from?.id?.toString();
  if (!telegramId) {
    return ctx.reply("‚ùå Error: Could not identify user");
  }

  try {
    const user = await db.User.findOne({ where: { telegram_id: telegramId } });
    if (!user) {
      return ctx.reply(
        "‚ùå Error: User not found. Please try registering again."
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–ª–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const debts = await db.Debt.findAll({
      where: { telegram_id: telegramId },
    });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Å—Ä–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const installments = await db.Installment.findAll({
      where: { telegram_id: telegramId },
    });

    // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –¥–æ–ª–≥–æ–≤ (–≤ UAH)
    const totalDebt = debts.reduce((sum, debt) => sum + Number(debt.amount), 0);
    const totalInstallments = installments.reduce(
      (sum, inst) => sum + Number(inst.total_remaining),
      0
    );

    const userCurrency = user.currency as any;

    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—ã –≤ –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const formattedTotalDebt = await exchangeRateService.formatAmount(
        totalDebt,
        "UAH",
        userCurrency
      );
      const formattedTotalInstallments = await exchangeRateService.formatAmount(
        totalInstallments,
        "UAH",
        userCurrency
      );
      const formattedTotal = await exchangeRateService.formatAmount(
        totalDebt + totalInstallments,
        "UAH",
        userCurrency
      );

      const message = `
üë§ *Profile*

*Name:* ${user.username}
*Currency:* ${CURRENCIES[userCurrency].emoji} ${userCurrency}

üí≥ *Total Debt:* ${formattedTotalDebt}
‚è±Ô∏è *Total Installments:* ${formattedTotalInstallments}
üí∞ *Total Amount:* ${formattedTotal}

_Last updated: ${new Date().toLocaleString()}_
`;

      return ctx.reply(message, {
        parse_mode: "Markdown",
        ...Markup.keyboard([
          [ProfileButtons.Feedback, ProfileButtons.Services],
          [ProfileButtons.Settings],
          [ProfileButtons.BackToMain],
        ])
          .resize()
          .oneTime(),
      });
    } catch (exchangeError) {
      console.error("Error converting currencies:", exchangeError);
      // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ UAH
      const message = `
üë§ *Profile*

*Name:* ${user.username}
*Currency:* ${CURRENCIES[userCurrency].emoji} ${userCurrency}

üí≥ *Total Debt:* ‚Ç¥${totalDebt.toFixed(2)}
‚è±Ô∏è *Total Installments:* ‚Ç¥${totalInstallments.toFixed(2)}
üí∞ *Total Amount:* ‚Ç¥${(totalDebt + totalInstallments).toFixed(2)}

_Last updated: ${new Date().toLocaleString()}_
_Note: Showing amounts in UAH due to conversion error_
`;

      return ctx.reply(message, {
        parse_mode: "Markdown",
        ...Markup.keyboard([
          [ProfileButtons.Feedback, ProfileButtons.Services],
          [ProfileButtons.Settings],
          [ProfileButtons.BackToMain],
        ])
          .resize()
          .oneTime(),
      });
    }
  } catch (error) {
    console.error("Error in handleProfile:", error);
    return ctx.reply(
      "‚ùå Error: Could not load profile. Please try again later."
    );
  }
};

export const handleChangeCurrency = async (ctx: BotContext) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const rates = await exchangeRateService.getCurrentRates();

    const rateInfo = `
üí± *Select your preferred currency:*

Current exchange rates (1 USD = ):
üá∫üá¶ UAH: ${rates.UAH?.toFixed(2) || "N/A"}
üá™üá∫ EUR: ${rates.EUR?.toFixed(4) || "N/A"}
üáµüá± PLN: ${rates.PLN?.toFixed(2) || "N/A"}

_Rates updated: ${new Date().toLocaleString()}_
`;

    return ctx.reply(rateInfo, {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard([
        [
          Markup.button.callback("üá∫üá¶ UAH (‚Ç¥)", "set_currency_UAH"),
          Markup.button.callback("üá∫üá∏ USD ($)", "set_currency_USD"),
        ],
        [
          Markup.button.callback("üá™üá∫ EUR (‚Ç¨)", "set_currency_EUR"),
          Markup.button.callback("üáµüá± PLN (z≈Ç)", "set_currency_PLN"),
        ],
        [Markup.button.callback("üîô Back to Settings", "back_to_settings")],
      ]),
    });
  } catch (error) {
    console.error("Error in handleChangeCurrency:", error);
    return ctx.reply("üí± Select your preferred currency:", {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard([
        [
          Markup.button.callback("üá∫üá¶ UAH (‚Ç¥)", "set_currency_UAH"),
          Markup.button.callback("üá∫üá∏ USD ($)", "set_currency_USD"),
        ],
        [
          Markup.button.callback("üá™üá∫ EUR (‚Ç¨)", "set_currency_EUR"),
          Markup.button.callback("üáµüá± PLN (z≈Ç)", "set_currency_PLN"),
        ],
        [Markup.button.callback("üîô Back to Settings", "back_to_settings")],
      ]),
    });
  }
};

export const handleSetCurrency = async (
  ctx: BotContext,
  currencyCode: string
) => {
  const telegramId = ctx.from?.id?.toString();
  if (!telegramId) {
    return ctx.reply("‚ùå Error: Could not identify user");
  }

  try {
    const user = await db.User.findOne({ where: { telegram_id: telegramId } });
    if (!user) {
      return ctx.reply("‚ùå Error: User not found");
    }

    await user.update({ currency: currencyCode });

    await ctx.answerCbQuery();
    await ctx.editMessageText(
      `‚úÖ Currency updated to ${
        CURRENCIES[currencyCode as any].emoji
      } ${currencyCode}\n\nReturning to settings...`
    );

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    setTimeout(() => {
      handleSettings(ctx);
    }, 1000);
  } catch (error) {
    console.error("Error in handleSetCurrency:", error);
    return ctx.reply("‚ùå Error: Could not update currency");
  }
};

export const handleSettings = async (ctx: BotContext) => {
  const telegramId = ctx.from?.id?.toString();
  if (!telegramId) {
    return ctx.reply("‚ùå Error: Could not identify user");
  }

  try {
    const user = await db.User.findOne({ where: { telegram_id: telegramId } });
    if (!user) {
      return ctx.reply("‚ùå Error: User not found");
    }

    const message = `
‚öôÔ∏è *Settings*

*Current Name:* ${user.username}
*Current Currency:* ${CURRENCIES[user.currency as any].emoji} ${user.currency}

Choose what you want to change:
`;

    return ctx.reply(message, {
      parse_mode: "Markdown",
      ...Markup.keyboard([
        [SettingsButtons.ChangeCurrency, SettingsButtons.ChangeName],
        [SettingsButtons.BackToProfile],
      ])
        .resize()
        .oneTime(),
    });
  } catch (error) {
    console.error("Error in handleSettings:", error);
    return ctx.reply("‚ùå Error: Could not load settings");
  }
};

export const handleChangeAccountName = async (ctx: BotContext) => {
  const telegramId = ctx.from?.id?.toString();
  if (!telegramId) {
    return ctx.reply("‚ùå Error: Could not identify user");
  }

  try {
    const user = await db.User.findOne({ where: { telegram_id: telegramId } });
    if (!user) {
      return ctx.reply("‚ùå Error: User not found");
    }

    const message = `
‚úèÔ∏è *Change Name*

*Current name:* ${user.username}

Please enter your new name:
`;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
    if (ctx.session) {
      ctx.session.waitingForNewName = true;
    }

    return ctx.reply(message, {
      parse_mode: "Markdown",
      ...Markup.keyboard([[SettingsButtons.BackToProfile]])
        .resize()
        .oneTime(),
    });
  } catch (error) {
    console.error("Error in handleChangeAccountName:", error);
    return ctx.reply("‚ùå Error: Could not load name change");
  }
};

export const handleNewAccountName = async (
  ctx: BotContext,
  newName: string
) => {
  const telegramId = ctx.from?.id?.toString();
  if (!telegramId) {
    return ctx.reply("‚ùå Error: Could not identify user");
  }

  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    if (!newName || newName.trim().length < 2) {
      return ctx.reply(
        "‚ùå Name must be at least 2 characters long. Please try again:"
      );
    }

    if (newName.trim().length > 50) {
      return ctx.reply(
        "‚ùå Name must be less than 50 characters. Please try again:"
      );
    }

    const user = await db.User.findOne({ where: { telegram_id: telegramId } });
    if (!user) {
      return ctx.reply("‚ùå Error: User not found");
    }

    const trimmedName = newName.trim();
    await user.update({ username: trimmedName });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    if (ctx.session) {
      ctx.session.waitingForNewName = false;
    }

    const message = `‚úÖ Account name updated successfully!

*New name:* ${trimmedName}

Returning to settings...`;

    await ctx.reply(message, {
      parse_mode: "Markdown",
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    setTimeout(() => {
      handleSettings(ctx);
    }, 1000);
  } catch (error) {
    console.error("Error in handleNewAccountName:", error);
    return ctx.reply("‚ùå Error: Could not update account name");
  }
};
